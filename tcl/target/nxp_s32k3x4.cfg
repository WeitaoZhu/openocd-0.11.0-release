# script for s32k3xx family
#
# s32k3xx devices support both JTAG and SWD transports.
# 下面两个文件是必须的因为涉及到JTAG 和 SWD 接口通用，即使你由SWD换成了JTAG方式一下脚本一样支持
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

# 如果芯片名不存在使用s32k3xx为芯片名
if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME s32k3xx
}

# 设置芯片大小端格式
   set _ENDIAN little

# 为加载RAM BIOS ELF文件,设置256KB的RAM空间并且准备清零
# Work-area is a space in RAM used for flash programming
# By default use 256kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x40000
}

# 检查芯片的DAP/TAP的ID是否是0x6ba00477, Cortex M7的DAP ID统一为0x6ba00477
#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0385
      # Section 40.6.3 - corresponds to Cortex-M7 with FPU r1p2
      set _CPUTAPID 0x6ba00477
   } {
      set _CPUTAPID 0x6ba02477
   }
}

# 检测_CPUTAPID是不是0x6ba02477，如果是创建芯片的DAP,创建DAP接口后便可以通过DAP访问芯片所有AP接口寄存器。
swj_newdap $_CHIPNAME armv7m -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.armv7m

if {[using_jtag]} {
   jtag newtap $_CHIPNAME bs -irlen 5
}

global TARGET

set TARGET       $_CHIPNAME.armv7m
set TARGET_MEMAP $_CHIPNAME.memap

# 创建芯片 Target,这个过程中通过DAP接口搜索所有AP。
# 由于NXP S32K344存在多cortex_m 内核互联的MEM AP.会导致target_examine失败。
# 因为我知道S32K344的Cortex M7 core 0的MEM AP为4，所以我指定检索-ap-num 4
target create ${TARGET}.cm7_0    cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 4 -coreid 0

# 必须init target相关的dap mmw mdw 才能在脚本成功被调用,不然后报错。
init

# 我在ftdi_ft2232d.cfg中,我设定了ADBUS4管脚为目标板的硬件RST
# 硬件复位
ftdi_set_signal nSRST 0
# 延时100ms
adapter srst delay 100
# 硬件解复位
ftdi_set_signal nSRST 1

# 注意：由于S32K344的debug 模式不是默认开启，需要通过DAP访问SDA-AP使能Debug模式
# 如果不使能DAP是无法接入Cortex M7 core 0的MEM AP
# Enable Cortex-M7 Core0 debug request
s32k3xx.dap  apreg 7 0x80 0x300000f0

# 复位Cortex-M7 Core0内部寄存器配置
cortex_m reset_config sysresetreq
cortex_m reset_config vectreset

# 启动调试模式，让Cortex-M7 Core0 halt等待下面得加载命令。
halt

# 为加载RAM BIOS ELF文件,设置256KB的RAM空间并且准备清零
${TARGET}.cm7_0 configure -work-area-phys 0x20400000 -work-area-size $_WORKAREASIZE -work-area-backup 0	
# 这里是加载我特意准备为实现烧写功能得RAM ELF文件。该RAM ELF是通过调试串口UART实现FLASH文件烧写。
# 注意在load_image之前必须得把target halt。
load_image D:/Work_Data/my_projects/Hayward_QC/S32K344_EVB/xpack-openocd-0.10.0-15-win32-x64/xpack-openocd-0.10.0-15/bin/Dio_example_DS.elf
# 这里我RAM ELF得起始地址是0x20400010，这里指定从0x20400010恢复。resume 是把PC指针指向0x20400010，释放了debug 模式。
resume 0x20400010

#下面是Target事件,其实它得实现方式类似于我们在代码里函数钩子。
# 因为每个芯片得Target Events处理是不一样的。这些事件需要做特殊处理

# 由于S32K3芯片的特殊性，如果不使能DAP是无法接入Cortex M7 core 0的MEM AP。
# 所以我增加了SDA AP使能在examine-start,确保在target_examine之前物理通路是通的。
${TARGET}.cm7_0 configure -event examine-start {
	# Enable Cortex-M7 Core0 debug request
	s32k3xx.dap  apreg 7 0x80 0x300000f0
}

# 为了在Telnel或者gdb调试过程中发起reset init/halt
${TARGET}.cm7_0 configure -event reset-init {
	# Keep the old DEMCR value.
	set old [mrw 0xE000EDFC]
    mww 0xE000ED08 0x20430000
	# Enable vector catch on reset.
	mww 0xE000EDFC 0x01000001

	# Issue local reset via AIRCR.
	mww 0xE000ED0C 0x05FA0001

	# Restore old DEMCR value.
	mww 0xE000EDFC $old

	cortex_m reset_config sysresetreq
	cortex_m reset_config vectreset

	mww 0x402DC140 0x00000001 1
	mww 0x402DC144 0x00000001 1
	
	mww 0x402DC134 0x0000F7DF 1
	mww 0x402DC100 0x00000001 1
	mww 0x402DC104 0x00000001 1
	mww 0x402DC000 0x00005AF0 1
	mww 0x402DC000 0x0000A50F 1
	
	mww 0x402DC330 0xB1E0FFF8 1
	mww 0x402DC334 0x812AA407 1
	mww 0x402DC338 0xBBF3FE7E 1
	mww 0x402DC33C 0x00000141 1
	mww 0x402DC300 0x00000001 1
	mww 0x402DC304 0x00000001 1
	mww 0x402DC000 0x00005AF0 1
	mww 0x402DC000 0x0000A50F 1
	
	mww 0x402DC530 0x29FFFFF0 1
	mww 0x402DC534 0xC48987F9 1
	mww 0x402DC500 0x00000001 1
	mww 0x402DC504 0x00000001 1
	mww 0x402DC000 0x00005AF0 1
	mww 0x402DC000 0x0000A50F 1
	
	# Disable WATCHDOG
	mwb 0x40280003 0x80 1
	mww 0x40210020 0x00400000 1
	mww 0x40210024 0x03030000 1
	mww 0x40210028 0x00050000 1
	mww 0x4021002C 0x00000000 1
	
	mww 0x40210030 0x20400000 1
	mww 0x40210034 0x00080008 1
	mww 0x40210038 0xFFFB0000 1
	mww 0x4021003C 0x00000001 1
}